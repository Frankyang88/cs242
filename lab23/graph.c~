#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "graph.h"
#include "mylib.h"


struct vertex{
int predecessor;
int distance;
state_t state;
int finish;	
};

struct graphrec{
int size;
struct vertex *vertice_array;
int **edge_array;
};



void graph_free(graph g){
	int i;


	for(i=0;i<g->size;i++){
		free(g->edge_array[i]);
	
	}

	free(g->vertice_array);
	free(g->edge_array);
	free(g);
}

graph graph_new(int vertices){
	int i,j;
	graph g=emalloc(sizeof(*g));
	g->size=vertices;
	g->vertice_array=emalloc(vertices*sizeof(struct vertex));
	g->edge_array   =emalloc(vertices*sizeof(int*));
	
	

	for(i=0;i<g->size;i++){
		g->edge_array[i]=emalloc(vertices*sizeof(int));
	}	
	
	for(i=0;i<g->size;i++){
		for(j=0;j<g->size;j++)
		g->edge_array[i][j] = 0;
	}
	return g;
}
int graph_add_edge(graph g, int u_index,int v_index,int direct_flag){
	if(u_index<g->size && v_index<g->size && direct_flag == 1)
	g->edge_array[u_index][v_index]=1;
	
	if(u_index<g->size && v_index<g->size && direct_flag == 0){
	g->edge_array[u_index][v_index]=1;
	g->edge_array[v_index][u_index]=1;
	}

	return 0;
}

void graph_print(graph g, FILE *stream){
	int i,j;
	int flag;
	fprintf(stream,"adjacency list:\n");
	for(i=0;i<g->size;i++){
		fprintf(stream,"%d |",i);
		flag=0;
		for(j=0;j<g->size;j++){
			if(g->edge_array[i][j]==1 && flag!=0){
			fprintf(stream,", %d",j);
			}
			if(g->edge_array[i][j]==1 && flag==0){
			fprintf(stream," %d",j);
			flag=1;
			}
		}
		fprintf(stream,"\n");
	}



}


static int step;

void visit(graph g, int v){
	int i;
	
	
	g->vertice_array[v].state=VISITED_SELF;
	step++;
	g->vertice_array[v].distance = step;

	for(i=0;i<g->size;i++){
		if(g->edge_array[v][i]==1 && g->vertice_array[i].state == UNVISITED){
			g->vertice_array[i].predecessor = v;
			visit(g,i);
		}
	}
	step++;
	g->vertice_array[v].state = VISITED_DECENDANTS;
	g->vertice_array[v].finish = step;


}

void graph_dfs(graph g ){
	int i;

	step = 0;
	
	step = 0;
	for(i=0;i<g->size;i++){
		g->vertice_array[i].state=UNVISITED;
		g->vertice_array[i].predecessor=-1;
	}
	for(i=0;i<g->size;i++){
		if(g->vertice_array[i].state==UNVISITED){
			visit(g,i);
		}
	}
	printf("vertex distance pred finish\n");
	for(i=0;i<g->size;i++){
		printf("%4d %8d %4d %4d\n",i,g->vertice_array[i].distance,g->vertice_array[i].predecessor,g->vertice_array[i].finish);
	}
	


}


